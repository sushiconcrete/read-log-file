log_density
# Create two upper triangular matrices
A <- matrix(c(1, 0, 0, 2, 4, 0, 3, 10, 9), nrow = 3)
B <- matrix(c(7, 0, 0, 9, 4, 0, 5, 8, 3), nrow = 3)
A
B
# Matrix production
A %*% B
# Fix digits to 10
options(digits = 10)
# Create a lower triangular matrix
A <- matrix(c(2, 0, 0, 3, 4, 0, 5, 6, 7), nrow = 3, ncol = 3, byrow = TRUE)
A
# Get A's inverse
round(solve(A), digits = 10)
# Create two unit lower triangular matrices
A <- matrix(c(1, 0, 0.5, 0, 1, 0, 0.2, 0.4, 1), nrow = 3, byrow = TRUE)
B <- matrix(c(1, 0, 0, 0.3, 1, 0, 0, 0.1, 1), nrow = 3, byrow = TRUE)
A
B
# Matrix production
A %*% B
# Create a unit lower triangular matrices
A <- matrix(c(1, 0, 0, 2, 1, 0, 3, 10, 1), nrow = 3)
A
# Inverse of A
solve(A)
a <- 0.7
b <- 0.2
c <- 0.1
sprintf("%.20f", (a + b) + c)
if ((a + b) + c == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", a + (b + c))
if (a + (b + c) == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", (a + c) + b)
if ((a + c) + b == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
a <- 0.7
b <- 0.2
c <- 0.1
sum <- (a + b) + c
sprintf("%.20f", sum)
library(Rmpfr)
a <- mpfr("0.7", precBits = 64)
b <- mpfr("0.2", precBits = 64)
c <- mpfr("0.1", precBits = 64)
sum2 <- (a + b) + c
sum2
x <- seq(0.988:1.012, by=0.001)
# Define the polynomials
f <- function(x) {
return(x^7 - 7*x^6 + 21*x^5 - 35*x^4 + 35*x^3 - 21*x^2 + 7*x - 1)
}
g <- function(x) {
return((x-1)^7)
}
# Plot the polynomial at each point in x
plot(x, f(x), xlim = c(0.988, 1.012), ylim = c(min(f(x)),max(f(x))))
plot(x, g(x), xlim = c(0.988, 1.012), ylim = c(min(g(x)),max(g(x))))
data <- read.table("/Users/delphia/Downloads/hw1 2/oringp.dat")
df <- as.data.frame(data)
colnames(df) <- c("flight#", "data", "#Orings", "#failed", "Temp@lauch")
df <- df[-nrow(df), ]
rownames(df) = NULL
df
cor(df$`#failed`, df$`Temp@lauch`)
# Initialize a random seed
set.seed(as.integer(Sys.time()))
# Initialize given parameter
n <- 100
q <- 5
sigma0 <- 1
sigma1 <- 5
mu <- sample(1:100, 100, replace=TRUE) #mu is a vector ~ n(0,1) by wiki
In <- diag(100) # Indentity matrix
Z <- matrix(sample(1:n*q, n*q, replace=TRUE), ncol=q) #Z is a matrix ~ n(0,1) by wiki
# Generate Y
Y <- rnorm(mu, sigma1^2 * (Z %*% t(Z)) + sigma0^2 * In)
#Y <- mvrnorm(n = 100, mu = mu, Sigma = sigma1^2 * (Z %*% t(Z)) + sigma0^2 * I)
length(Y)
Y
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
# Create two upper triangular matrices
A <- matrix(c(1, 0, 0, 2, 4, 0, 3, 10, 9), nrow = 3)
B <- matrix(c(7, 0, 0, 9, 4, 0, 5, 8, 3), nrow = 3)
A
B
# Matrix production
A %*% B
# Fix digits to 10
options(digits = 10)
# Create a lower triangular matrix
A <- matrix(c(2, 0, 0, 3, 4, 0, 5, 6, 7), nrow = 3, ncol = 3, byrow = TRUE)
A
# Get A's inverse
round(solve(A), digits = 10)
# Create two unit lower triangular matrices
A <- matrix(c(1, 0, 0.5, 0, 1, 0, 0.2, 0.4, 1), nrow = 3, byrow = TRUE)
B <- matrix(c(1, 0, 0, 0.3, 1, 0, 0, 0.1, 1), nrow = 3, byrow = TRUE)
A
B
# Matrix production
A %*% B
# Create a unit lower triangular matrices
A <- matrix(c(1, 0, 0, 2, 1, 0, 3, 10, 1), nrow = 3)
A
# Inverse of A
solve(A)
a <- 0.7
b <- 0.2
c <- 0.1
sprintf("%.20f", (a + b) + c)
if ((a + b) + c == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", a + (b + c))
if (a + (b + c) == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", (a + c) + b)
if ((a + c) + b == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
a <- 0.7
b <- 0.2
c <- 0.1
sum <- (a + b) + c
sprintf("%.20f", sum)
library(Rmpfr)
a <- mpfr("0.7", precBits = 64)
b <- mpfr("0.2", precBits = 64)
c <- mpfr("0.1", precBits = 64)
sum2 <- (a + b) + c
sum2
x <- seq(0.988:1.012, by=0.001)
# Define the polynomials
f <- function(x) {
return(x^7 - 7*x^6 + 21*x^5 - 35*x^4 + 35*x^3 - 21*x^2 + 7*x - 1)
}
g <- function(x) {
return((x-1)^7)
}
# Plot the polynomial at each point in x
plot(x, f(x), xlim = c(0.988, 1.012), ylim = c(min(f(x)),max(f(x))))
plot(x, g(x), xlim = c(0.988, 1.012), ylim = c(min(g(x)),max(g(x))))
data <- read.table("/Users/delphia/Downloads/hw1 2/oringp.dat")
df <- as.data.frame(data)
colnames(df) <- c("flight#", "data", "#Orings", "#failed", "Temp@lauch")
df <- df[-nrow(df), ]
rownames(df) = NULL
df
cor(df$`#failed`, df$`Temp@lauch`)
# Initialize a random seed
set.seed(as.integer(Sys.time()))
# Initialize given parameter
n <- 100
q <- 5
sigma0 <- 1
sigma1 <- 5
mu <- sample(1:100, 100, replace=TRUE) #mu is a vector ~ n(0,1) by wiki
In <- diag(100) # Indentity matrix
Z <- matrix(sample(1:n*q, n*q, replace=TRUE), ncol=q) #Z is a matrix ~ n(0,1) by wiki
# Generate Y
Y <- rnorm(mu, sigma1^2 * (Z %*% t(Z)) + sigma0^2 * In)
#Y <- mvrnorm(n = 100, mu = mu, Sigma = sigma1^2 * (Z %*% t(Z)) + sigma0^2 * I)
length(Y)
Y
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
library(mvtnorm)
a<-dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
a
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
# Create two upper triangular matrices
A <- matrix(c(1, 0, 0, 2, 4, 0, 3, 10, 9), nrow = 3)
B <- matrix(c(7, 0, 0, 9, 4, 0, 5, 8, 3), nrow = 3)
A
B
# Matrix production
A %*% B
# Fix digits to 10
options(digits = 10)
# Create a lower triangular matrix
A <- matrix(c(2, 0, 0, 3, 4, 0, 5, 6, 7), nrow = 3, ncol = 3, byrow = TRUE)
A
# Get A's inverse
round(solve(A), digits = 10)
# Create two unit lower triangular matrices
A <- matrix(c(1, 0, 0.5, 0, 1, 0, 0.2, 0.4, 1), nrow = 3, byrow = TRUE)
B <- matrix(c(1, 0, 0, 0.3, 1, 0, 0, 0.1, 1), nrow = 3, byrow = TRUE)
A
B
# Matrix production
A %*% B
# Create a unit lower triangular matrices
A <- matrix(c(1, 0, 0, 2, 1, 0, 3, 10, 1), nrow = 3)
A
# Inverse of A
solve(A)
a <- 0.7
b <- 0.2
c <- 0.1
sprintf("%.20f", (a + b) + c)
if ((a + b) + c == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", a + (b + c))
if (a + (b + c) == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", (a + c) + b)
if ((a + c) + b == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
a <- 0.7
b <- 0.2
c <- 0.1
sum <- (a + b) + c
sprintf("%.20f", sum)
library(Rmpfr)
a <- mpfr("0.7", precBits = 64)
b <- mpfr("0.2", precBits = 64)
c <- mpfr("0.1", precBits = 64)
sum2 <- (a + b) + c
sum2
x <- seq(0.988:1.012, by=0.001)
# Define the polynomials
f <- function(x) {
return(x^7 - 7*x^6 + 21*x^5 - 35*x^4 + 35*x^3 - 21*x^2 + 7*x - 1)
}
g <- function(x) {
return((x-1)^7)
}
# Plot the polynomial at each point in x
plot(x, f(x), xlim = c(0.988, 1.012), ylim = c(min(f(x)),max(f(x))))
plot(x, g(x), xlim = c(0.988, 1.012), ylim = c(min(g(x)),max(g(x))))
data <- read.table("/Users/delphia/Downloads/hw1 2/oringp.dat")
df <- as.data.frame(data)
colnames(df) <- c("flight#", "data", "#Orings", "#failed", "Temp@lauch")
df <- df[-nrow(df), ]
rownames(df) = NULL
df
cor(df$`#failed`, df$`Temp@lauch`)
# Initialize a random seed
set.seed(as.integer(Sys.time()))
# Initialize given parameter
n <- 100
q <- 5
sigma0 <- 1
sigma1 <- 5
mu <- sample(1:100, 100, replace=TRUE) #mu is a vector ~ n(0,1) by wiki
In <- diag(100) # Indentity matrix
Z <- matrix(sample(1:n*q, n*q, replace=TRUE), ncol=q) #Z is a matrix ~ n(0,1) by wiki
# Generate Y
Y <- rnorm(mu, sigma1^2 * (Z %*% t(Z)) + sigma0^2 * In)
#Y <- mvrnorm(n = 100, mu = mu, Sigma = sigma1^2 * (Z %*% t(Z)) + sigma0^2 * I)
length(Y)
Y
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = FALSE)
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = FALSE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
# Create two upper triangular matrices
A <- matrix(c(1, 0, 0, 2, 4, 0, 3, 10, 9), nrow = 3)
B <- matrix(c(7, 0, 0, 9, 4, 0, 5, 8, 3), nrow = 3)
A
B
# Matrix production
A %*% B
# Fix digits to 10
options(digits = 10)
# Create a lower triangular matrix
A <- matrix(c(2, 0, 0, 3, 4, 0, 5, 6, 7), nrow = 3, ncol = 3, byrow = TRUE)
A
# Get A's inverse
round(solve(A), digits = 10)
# Create two unit lower triangular matrices
A <- matrix(c(1, 0, 0.5, 0, 1, 0, 0.2, 0.4, 1), nrow = 3, byrow = TRUE)
B <- matrix(c(1, 0, 0, 0.3, 1, 0, 0, 0.1, 1), nrow = 3, byrow = TRUE)
A
B
# Matrix production
A %*% B
# Create a unit lower triangular matrices
A <- matrix(c(1, 0, 0, 2, 1, 0, 3, 10, 1), nrow = 3)
A
# Inverse of A
solve(A)
a <- 0.7
b <- 0.2
c <- 0.1
sprintf("%.20f", (a + b) + c)
if ((a + b) + c == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", a + (b + c))
if (a + (b + c) == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
sprintf("%.20f", (a + c) + b)
if ((a + c) + b == 1) {
print("(a + b) + c equals 1")
} else {
print("(a + b) + c does not equal 1")
}
a <- 0.7
b <- 0.2
c <- 0.1
sum <- (a + b) + c
sprintf("%.20f", sum)
library(Rmpfr)
a <- mpfr("0.7", precBits = 64)
b <- mpfr("0.2", precBits = 64)
c <- mpfr("0.1", precBits = 64)
sum2 <- (a + b) + c
sum2
x <- seq(0.988:1.012, by=0.001)
# Define the polynomials
f <- function(x) {
return(x^7 - 7*x^6 + 21*x^5 - 35*x^4 + 35*x^3 - 21*x^2 + 7*x - 1)
}
g <- function(x) {
return((x-1)^7)
}
# Plot the polynomial at each point in x
plot(x, f(x), xlim = c(0.988, 1.012), ylim = c(min(f(x)),max(f(x))))
plot(x, g(x), xlim = c(0.988, 1.012), ylim = c(min(g(x)),max(g(x))))
data <- read.table("/Users/delphia/Downloads/hw1 2/oringp.dat")
df <- as.data.frame(data)
colnames(df) <- c("flight#", "data", "#Orings", "#failed", "Temp@lauch")
df <- df[-nrow(df), ]
rownames(df) = NULL
df
cor(df$`#failed`, df$`Temp@lauch`)
# Initialize a random seed
set.seed(as.integer(Sys.time()))
# Initialize given parameter
n <- 100
q <- 5
sigma0 <- 1
sigma1 <- 5
mu <- sample(1:100, 100, replace=TRUE) #mu is a vector ~ n(0,1) by wiki
In <- diag(100) # Indentity matrix
Z <- matrix(sample(1:n*q, n*q, replace=TRUE), ncol=q) #Z is a matrix ~ n(0,1) by wiki
# Generate Y
Y <- rnorm(mu, sigma1^2 * (Z %*% t(Z)) + sigma0^2 * In)
#Y <- mvrnorm(n = 100, mu = mu, Sigma = sigma1^2 * (Z %*% t(Z)) + sigma0^2 * I)
length(Y)
Y
library(mvtnorm)
dmvnorm(Y, mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
dmvnorm_lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
}
library(mvtnorm)
dmvnorm(x = Y, mu = mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
library(mvtnorm)
dmvnorm(x = Y, mean = mu, sigma = sigma1^2 * Z %*% t(Z) + (sigma0^2) * In, log = TRUE)
A <- sigma0^2 * In
U <- sigma1^2 * Z
V <- Z
dim(A)
dim(U)
dim(V)
Im = diag(q)
# Woodbury formula
inverse_sigma <- solve(A) - (solve(A) %*% U %*% (solve(Im + t(V) %*% solve(A) %*% U)) %*% t(V) %*% solve(A))
det_sigma <- det(A)*det(Im + t(V) %*% solve(A) %*% U)
log_density <- (-n/2) * (log(2*pi)) - (1/2) * log(det_sigma) - 1/2 * t(mu - Y) %*% inverse_sigma %*% (Y-mu)
log_density
log_entry <- c(
"Jun 15 02:04:59 combo sshd(pam_unix)[20896]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root",
"Dec  1 02:20:05 ip-172-31-27-153 sshd[23842]: Did not receive identification string from 218.75.153.170",
"Mar 28 19:00:30 ip-10-77-20-248 systemd-logind[1118]: New session 44 of user ubuntu.",
"Mar 27 13:08:09 ip-10-77-20-248 systemd: pam_unix(systemd-user:session): session opened for user ubuntu by (uid=0)",
"Jul  1 09:01:05 calvisitor-10-105-160-95 com.apple.CDScheduler[43]: Thermal pressure state: 1 Memory pressure state: 0",
"Jul  1 09:29:02 calvisitor-10-105-160-95 sandboxd[129] ([31211]): com.apple.Addres(31211) deny network-outbound /private/var/run/mDNSResponder"
)
#pattern <- "([a-zA-Z]{3} +[0-9]{1,2} [0-9:]+) ([^ ]+) ((?:[a-zA-Z-]+(?:\\([^)]+\\))?)+)\\[(\\d+)\\]: (.*)"
#pattern1 <- "([a-zA-Z]{3} +[0-9]{1,2} [0-9:]+) ([^ ]+) (?:([a-zA-Z0-9\\.\\-]+(?:\\([^)]+\\))?)+)(?:\\[(\\d+)\\])?: (.*)"
#pattern1 <- "([a-zA-Z]{3} +\\d{1,2} \\d{2}:\\d{2}:\\d{2}) ([^ ]+) ((?:[a-zA-Z0-9.-]+(?:\\([^)]
#test <- grepl(pattern1, log_entry)
#test
pattern1 <- "([a-zA-Z]{3} +\\d{1,2} \\d{2}:\\d{2}:\\d{2}) ([^ ]+) ((?:[a-zA-Z0-9.-]+(?:\\([^)]+\\))?)+)(?:\\[(\\d+)\\])?: (.*)"
library(stringr)
# Apply str_match() to the log_entry
matches <- str_match(log_entry, pattern1)
# Print the matches matrix
df <- as.data.frame(matches)
df <- df[,-1]
df
log_entry <- c(
"Jun 15 02:04:59 combo sshd(pam_unix)[20896]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root",
"Dec  1 02:20:05 ip-172-31-27-153 sshd[23842]: Did not receive identification string from 218.75.153.170",
"Mar 28 19:00:30 ip-10-77-20-248 systemd-logind[1118]: New session 44 of user ubuntu.",
"Mar 27 13:08:09 ip-10-77-20-248 systemd: pam_unix(systemd-user:session): session opened for user ubuntu by (uid=0)",
"Jul  1 09:01:05 calvisitor-10-105-160-95 com.apple.CDScheduler[43]: Thermal pressure state: 1 Memory pressure state: 0",
"Jul  1 09:29:02 calvisitor-10-105-160-95 sandboxd[129] ([31211]): com.apple.Addres(31211) deny network-outbound /private/var/run/mDNSResponder"
)
#pattern <- "([a-zA-Z]{3} +[0-9]{1,2} [0-9:]+) ([^ ]+) ((?:[a-zA-Z-]+(?:\\([^)]+\\))?)+)\\[(\\d+)\\]: (.*)"
#pattern1 <- "([a-zA-Z]{3} +[0-9]{1,2} [0-9:]+) ([^ ]+) (?:([a-zA-Z0-9\\.\\-]+(?:\\([^)]+\\))?)+)(?:\\[(\\d+)\\])?: (.*)"
#pattern1 <- "([a-zA-Z]{3} +\\d{1,2} \\d{2}:\\d{2}:\\d{2}) ([^ ]+) ((?:[a-zA-Z0-9.-]+(?:\\([^)]
#test <- grepl(pattern1, log_entry)
#test
pattern1 <- "([a-zA-Z]{3} +\\d{1,2} \\d{2}:\\d{2}:\\d{2}) ([^ ]+) ((?:[a-zA-Z0-9.-]+(?:\\([^)]+\\))?)+)(?:\\[(\\d+)\\])?:: (.*)"
library(stringr)
# Apply str_match() to the log_entry
matches <- str_match(log_entry, pattern1)
